package  {	import flash.display.MovieClip;	import flash.net.Socket;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;	import flash.events.ProgressEvent;	import flash.events.MouseEvent;	import com.adobe.serialization.json.*;	import flash.utils.Dictionary;	import flash.utils.Timer;	import flash.events.TimerEvent;		public class core extends MovieClip {		private var socket:Socket;		private var org:Dictionary = new Dictionary;				private var refreshTimer:Timer = new Timer(50, 0);		private var boezemSystoleTimer:Timer = new Timer(1000, 0);		private var kamerSystoleTimer:Timer = new Timer(80, 1);				public function core() {			initSettings();			initListeners();			initSocket();			refreshTimer.addEventListener(TimerEvent.TIMER, refreshOrg);			boezemSystoleTimer.addEventListener(TimerEvent.TIMER, boezemSystole);			kamerSystoleTimer.addEventListener(TimerEvent.TIMER, kamerSystole);		}				private function initSettings():void {		}				private function initListeners():void {		}				private function initSocket():void {			socket = new Socket("127.0.0.1", 8081);			socket.addEventListener(Event.CONNECT, onSocketConnected);			socket.addEventListener(Event.CLOSE, onSocketDisconnected);			socket.addEventListener(IOErrorEvent.IO_ERROR, onSocketError);			socket.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSocketError);			socket.addEventListener(ProgressEvent.SOCKET_DATA, onSocketData);						org["Hart"]				= Hart;			org["Rechterboezem"]	= Rechterboezem;			org["Linkerboezem"]		= Linkerboezem;			org["Rechterkamer"] 	= Rechterkamer;			org["Linkerkamer"] 		= Linkerkamer;			org["Aorta"]			= Aorta;			org["Kransslagader"]	= Kransslagader;			org["Longen"]			= Longen;						refreshTimer.start();			boezemSystoleTimer.start();		}				function refreshOrg(event:TimerEvent):void {			socket.writeUTFBytes("vernieuw");		}				function boezemSystole(event:TimerEvent):void {			socket.writeUTFBytes("boezemsystole");			kamerSystoleTimer.start();		}				function kamerSystole(event:TimerEvent):void {			socket.writeUTFBytes("kamersystole");						kamerSystoleTimer.stop();		}		private function onSocketData(e:ProgressEvent):void {			var json = new JSONDecoder(socket.readUTFBytes(socket.bytesAvailable), true);			var orgaansysteemData = json.getValue();						for (var onderdeel:String in org) {								org[onderdeel].alpha = orgaansysteemData[onderdeel].bloed.druk / 150;			}		}				private function onSocketConnected(e:Event):void {			trace ("Verbonden met orgaansysteem");		}				private function onSocketDisconnected(e:Event):void {			trace ("Verbinding met orgaansysteem gesloten");		}				private function onSocketError(e:*):void {			trace ("Fout met verbinding!");		}	}}